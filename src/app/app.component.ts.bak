import {
  AfterViewInit,
  Component, OnDestroy,
  OnInit, QueryList, ViewChildren
} from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit, OnDestroy, AfterViewInit {

  private subscriptions: Array<Subscription> = [];

  @ViewChildren(PluginWindowComponent) windowChildren: QueryList<PluginWindowComponent> = new QueryList<PluginWindowComponent>();
  pluginWindows: Array<PluginWindowComponent> = [];

  taskbar: Taskbar=new Taskbar();


  constructor(private dawService: AngularDawService) {
    this.subscriptions.push(this.dawService.pluginAdded.subscribe((plugin: DawPlugin) => {

      plugin.active.next(false);
      plugin.active.subscribe(next => {
        if (next) this.taskbar.entries.push(new TaskbarEntry(plugin.getId(), plugin.name()));
        else {
          let index = this.taskbar.entries.findIndex(entry => entry.id === plugin.getId());
          this.taskbar.entries.splice(index, 1);
        }
      })

    }));
  }

  ngOnInit() {


  }

  taskbarClicked(entry: TaskbarEntry): void {
    let window = this.pluginWindows.filter(w=>w.plugin.getId()===entry.id)[0];
    window.state.next(WindowState.NORMAL);
  }

  shortcutClicked(pluginId:string):void{
    let plugin = this.dawService.plugins.filter(plugin=>plugin.getId()===pluginId)[0];
    if (plugin.active.getValue()===false) {
      console.log("activating plugin");
      plugin.active.next(true);
    }

  }

  ngOnDestroy(): void {
    this.subscriptions.forEach(subscription => subscription.unsubscribe());
  }

  ngAfterViewInit(): void {
    this.windowChildren.forEach(pw => this.pluginWindows.push(pw));
    this.pluginWindows.forEach(pluginWindow => {
      pluginWindow.state.subscribe(state => {
        if (state === WindowState.CLOSED) {
        }
        else {
          this.pluginWindows.forEach(pluginWindow => pluginWindow.zIndex = 0);
          if (state === WindowState.MAXIMIZED) pluginWindow.zIndex = this.pluginWindows.length;
        }

      })
    })
  }

}
